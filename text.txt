import pytest
import unittest
from unittest.mock import patch, mock_open
from datazone.parts.domain.data_model.catalog.descriptions.catalog_descriptions import (
    read_description, get_catalog_mapping, map_catalog_configuration
)

class TestReadDescription:
    mock_file_content = '{"test_key2_a": "test_value_a"}'
    
    def test_read_description(self):
        self.mock_descriptions = {
            "test_key2_a": "test_value_a"
        }
        with patch(
            'builtins.open', 
            new=mock_open(read_data=self.mock_file_content), 
            create=True
        ):
            assert read_description("dummy").get("test_key2_a") == self.mock_descriptions.get("test_key2_a")
    
    def test_get_catalog_mapping(self):
        self.mock_descriptions_catalog = '''
        {
            "provider": {"test_key2_a": "test_value_a"},
            "package": {"test_key2_b": "test_value_b"},
            "dataset": {"test_key2_c": "test_value_c"}
        }
        '''
        with patch(
            'builtins.open', 
            new=mock_open(read_data=self.mock_descriptions_catalog), 
            create=True
        ):
            assert get_catalog_mapping("provider").get("test_key2_a") == "test_value_a"

    def test_map_catalog_configuration(self):
        # Mock the return of get_catalog_mapping to provide a predefined mapping
        mock_mapping = {"desired_key_1": "config_key_1", "desired_key_2": "config_key_2"}
        
        # Mocked configuration that should match the mock_mapping keys
        mock_configuration = {
            "config_key_1": "value_1",
            "config_key_2": "value_2",
            "config_key_3": "value_3"  # This should be ignored
        }
        
        expected_output = {
            "desired_key_1": "value_1",
            "desired_key_2": "value_2"
        }

        with patch('datazone.parts.domain.data_model.catalog.descriptions.catalog_descriptions.get_catalog_mapping', return_value=mock_mapping):
            assert map_catalog_configuration(mock_configuration, "provider") == expected_output

if __name__ == "__main__":
    pytest.main()
